html 5
css 3
js-->libraries
	 =========
	 jquery
	 backbone.js
	 knockout.js
	 express.js
	 node.js
	 react.js

js known as es5(Ecma Script-5)
type script es6

s/w req
=======
node js-->
		node -v
		npm -v
		npm install -g @angular/cli (to install angular)
		ng --version
		ng serve -o (or) -open (to run project)
		ng serve (to run but not to open in browser)
		ng serve --port 4300 -o(to change port number)
npm
angular cli-->
		uses server called Webpack Development Server
vsc

Execution flow of application==>
-----------------------------
compilation is done by main.ts --> index.html(loaded) --> app.module.ts --> app.component.ts -->
--> renders the template app.component.html

webpack:
=======
*Module bundler.
*Creates js bundle and makes this available to browser.
*Has an internal server called webpack development server, that has a feature called live watching,
	that watches our application and apply changes if any in the UI.
*This feature is because of an inbuilt tool called Grunt/Gulp.

systemJs:
========
*Same as webpack but doesnt have live watching mechanism.

Angular Component:
-----------------
*Its a type script class.
*Angular application is a tree of components.
*Component is heart of angular application.
*Will be defined by a decorator @Component.
	=> ng generate component helloworld (or) ng g c helloworld (to create a new component)
	4 files generated.. html, css, spec.ts(for TCs), ts.
	
Template:
--------
*Inline=>
	ng g c product --inline-template.
	uses backticks which allows us to add single or multiple line html statements.
*External=>
	ng g c product

Template Binding:
----------------
1.Interpolation/Angular Expression
	{{}}
	-one way data binding.//component to template
2.Property Bindig
	[]
	-one way data binding.//component to template
3.Event Binding
	()
	-one way data binding.//template to component
4.Two way data binding
	[()]
	-we use directive ngModel to do two way data binding
	-[(ngModel)]

Directives:
----------
1.Component Directives

2.Structural Directives
	-*ngFor, *ngIf, *ngSwitch.
	-adding an element to dom or removes an element from dom.
	-changes structure of dom.

3.Attribute directives
	-ngClass, ngStyle, ngModel, ngNonBindable.
	-changes the behaviour of the element.

In Built pipes:
--------------
-Lowercase
	{{'CAPGEMINI' | lowercase}}	//capgemini
	
-Uppercase
	{{'capgemini' | uppercase}}	//CAPGEMINI

-Currency
	{{1234.56 | currency:'USD' or 'INR'}}	//$1234.56

-Date
	*date has different arguments:
	YYYY	-- 4 digit year
	YY		-- 2 digit year
	MMM		-- month name
	MM		-- month in digit
	DD		-- date in digit
	EEE		-- first three letters in week day
	EEEE	-- full name
	hh		-- hours in 12hours format
	mm		-- minutes
	ss		-- seconds
	HH		-- hours in 24 hours format
	a		-- AM/PM
	z		-- time zone

	{{d | date:'EEEE dd-MM-yyyy'}}	//Thursday 6-12-2018
	
-Number
	{{4200.156 | number:'4.1-3'}}	//4200.l56
	{{4200.156 | number:'4.1-2'}}	//4200.l6
	{{4200.156 | number:'5.1-3'}}	//04200.156

-Percent
	{{1 | percent}}	//100%
	{{2 | percent}}	//200%
	{{.25 | percent}} //25%

-Slice
	{{['a','e','i','o','u'] | slice:2}}		//i,o,u
	{{['a','e','i','o','u'] | slice:1:3}}	//e,i	(substring laaga anamata..)

Creating a Custom pipe:
-----------------------
==>ng generate pipe mysort (or) ng g p pipe_name

Router:
======
-Router outlet is an inbuilt angular component used to place the content of a component in UI.

Angular Forms:
=============
-Model Driven forms:
	Controlling using ngModel.
-Template Driven forms:
	HTML form with fields. Form field control is browser.
-Reactive forms:
	Controlling form fields and data in angular.
	Faster than html forms. Data of the form is loaded at the compile time itself.

properties of form-validation:
-----------------------------
*valid: to check validity.
*touched: touched or not and provided with data or not.
*dirty: touched and value is also changed in the field.
*invalid

-Form Group:
	Each group has an in built control called Form Controller.

==>ng g i Interface_name

--------------------------------------------------------------------------------------------------
production:
==========
from inside the project folder,
-->ng build (or) ng build --prod
	dist folder is then used for deploying.			//yarn-tool(ts to js)

-->npm build (or) npm run build
---------------------------------------------------------------------------------------------------
Rest API and Http:
=================
->http methods//servlet methods(with do in front)
get 
post
do
delete

->load project in IDE, create a new json file in src.
->npm install -g json-server
->from json file location, run json-server --watch filename.json
->npm i --save @angular/http 
	for installing http package.